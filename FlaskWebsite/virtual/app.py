from flask import Flask, render_template, request, flash, redirect, send_file
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from sqlalchemy.sql import text
import sqlite3
from flask import g
import sqlalchemy
from io import BytesIO
import sys
import os

sys.path.insert(0, './../../mainCode')
from toolkit import website_upload

app = Flask(__name__)
if not os.path.isfile('files_database.db'):
    db_name = 'files_database.db'
else:
    db_name = 'files_database.db'
# Initialize app & set relative path where database is located
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + db_name
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True
app.config['SECRET_KEY'] = "super secret key"

# Initialize database
db = SQLAlchemy(app)
uploads_dir = os.path.join(app.instance_path, 'uploads')
os.makedirs(uploads_dir, exist_ok=True)


# Database model
class files_database(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(500), nullable=False, unique=True)
    # data = db.Column(db.LargeBinary)
    date_submitted = db.Column(db.DateTime, default=datetime.utcnow)
    md5hash = db.Column(db.String(500))
    sha1hash = db.Column(db.String(500))
    sha256hash = db.Column(db.String(500))
    size_of_file = db.Column(db.String(500))
    date_created = db.Column(db.String(500))
    classification = db.Column(db.String(500))
    # text_file = db.Column(db.LargeBinary)
    text_file = db.Column(db.String(500))

    def __repr__(self):
        return 'Name %r>' % self.id


@app.route('/')
def index():
    return render_template("index.html")


@app.route('/about')
def about():
    return render_template("about.html")


@app.route('/submit', methods=["POST", "GET"])
def submit():
    title = "Submit your file(s) here"

    if request.method == "POST":
        file = request.files["execFile"]  # file is the binary itself, run toolkit.py function here
        file.save(os.path.join(uploads_dir, file.filename))
        local_path = os.path.join(uploads_dir, file.filename)
        db_list = website_upload(local_path)
        try:
            # place items in the dictionary in the line below
            upload_file = files_database(filename=file.filename, md5hash=db_list[0], sha1hash=db_list[1],
                                         sha256hash=db_list[2], size_of_file=db_list[3], date_created=db_list[4],
                                         classification=db_list[5], text_file=db_list[6])  # data=file.read())
            db.session.add(upload_file)
            db.session.commit()
            flash("File successfully submitted!", category="success")

        except sqlalchemy.exc.IntegrityError:
            flash("You have already submitted this file.", category="error")
            return redirect("/submit")

    return render_template("submit.html")


@app.route('/files', methods=["POST", "GET"])
def files():
    date_submitted = files_database.query.order_by(files_database.date_submitted).all()
    filename = date_submitted
    md5hash = date_submitted
    sha1hash = date_submitted
    sha256hash = date_submitted
    size_of_file = date_submitted
    date_created = date_submitted
    classification = date_submitted
    text_file = date_submitted

    return render_template("files.html", date_submitted=date_submitted, filename=filename,
                           md5hash=md5hash, sha1hash=sha1hash,
                           sha256hash=sha256hash, size_of_file=size_of_file,
                           date_created=date_created, classification=classification, text_file=text_file)


@app.route("/download/<int:id>", methods=["GET", "POST"])
def download(id):
    text_file = files_database.query.filter_by(id=id).first()
    return send_file(text_file.text_file, mimetype="application/rtf", as_attachment=True,
                     attachment_filename=text_file.filename + '.txt')


if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)
