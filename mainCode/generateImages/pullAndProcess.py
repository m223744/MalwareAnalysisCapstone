#!/usr/bin/env python3

# Import csv for parseCsv
from audioop import getsample
import csv

# Image library for generating image representation of binary
from PIL import Image

# Imports for MalwareBazaar api
import requests
import pyzipper
import tempfile


class malSample:

    def __init__(self, timeStamp, hash, fileType, signature, tags, reporter, category):
        self.timeStamp = timeStamp
        self.hash = hash
        self.fileType = fileType
        self.signature = signature
        self.tags = tags
        self.reporter = reporter
        self.category = category

    def __str__(self):
        return "Category: " + self.category + "\tSignature: " + self.signature + "\tHash: " + self.hash[0:30] + "..."


'''
Parse the csv file of hashed from malwarebazaar and generate a 'malSample'
class for each one, containing the hash, category, and metadata of the malware sample
returns a list of malSample objects
'''


def parseCsv(file):
    samples = []
    with open(file, newline='\n') as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            samples.append(
                malSample(row[0], row[1], row[2], row[3], row[4], row[5], row[6]))

    return samples


'''
Generate the image file from the first 'size' bytes of the inputted bytes
returns an Image object
'''


def genImage(inBytes, outputName):
    # file = "/Users/dylanlarks/Documents/IMG_3264.jpg"

    size = 65536
    read = 0
    array = []

    for i in range(0, size, 3):
        # Bytes are already sequences of integers, use slicing to get byte objects vs indexing
        byte_list = (inBytes[i:i + 1], inBytes[i + 1:i + 2], inBytes[i + 2:i + 3])  # Tuple of the bytes
        first = int.from_bytes(byte_list[0], "big")  # Convert bytes to integer
        second = int.from_bytes(byte_list[1], "big")
        third = int.from_bytes(byte_list[2], "big")
        rgb_tuple = (first, second, third)
        if len(rgb_tuple) == 3:
            array.append(rgb_tuple)
        read += 1
    im = Image.new("RGB", (256, 256))
    im.putdata(array)
    im.save("/home/eric/github/MalwareAnalysisCapstone/mainCode/output/" + outputName + ".png")
    return im


'''
Get the sample from the malwarebazaar website using the api. 
Returns byte object of first file found in downloaded and decrypted archive
'''


def getSample(sample):
    print("Running getSample")
    hash = sample.hash
    category = sample.category

    ZIP_PASSWORD = b'infected'
    headers = {'API-KEY': ''}

    data = {
        'query': 'get_file',
        'sha256_hash': hash,
    }

    response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, timeout=10, headers=headers,
                             allow_redirects=True)

    if 'file_not_found' in response.text:
        print("Error: file not found")
        return

    else:
        # Create a temporary file which is the downloaded zip
        with tempfile.TemporaryFile('w+b') as tempZip:
            # Write the zip bytes to the temp zip file
            tempZip.write(response.content)
            with pyzipper.AESZipFile(tempZip) as zf:  # Open the zip file
                output = zf.read(zf.namelist()[0],
                                 pwd=ZIP_PASSWORD)  # Read the first file in the archive and decrypt it
                print("Downloaded and Unzipped " + zf.namelist()[0])
                return output


samples = parseCsv('./mainCode/MalwareBazaar.csv')

for sample in samples:
    genImage(getSample(sample), sample.category + "-" + sample.hash)
