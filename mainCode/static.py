import sys, argparse, os, hashlib, r2pipe
from subprocess import Popen, PIPE


def static_to_dict(file):
    BUF_SIZE = 65536
    static_dict = {}
    command_dict = {'file': "-b", "nm": "--extern-only", "objdump": "-Mintel -f -d"}
    if not os.path.isfile(file):
        print("Not a valid file, rerun the program with the correct filename.")
        exit(1)

    with open(file, 'rb') as f:
        md5 = hashlib.md5()
        sha1 = hashlib.sha1()
        sha256 = hashlib.sha256()
        while True:
            data = f.read(BUF_SIZE)
            if not data:
                break
            md5.update(data)
            sha1.update(data)
            sha256.update(data)
        hashes = {'md5': md5.hexdigest(), 'sha1': sha1.hexdigest(), 'sha256': sha256.hexdigest()}
        static_dict.update(hashes)
    radare = r2pipe.open(file, flags=['-2'])
    radare.cmd('aaaa')
    # print(radare.cmd('ie'))
    strings = radare.cmd('iz')
    data = radare.cmdj('ij')
    funcs = radare.cmd('afl')
    arch = data["bin"]["arch"]
    size = data["core"]["size"]
    bintype = data["bin"]["bintype"]
    opsystem = data["bin"]["os"]
    info = {'strings': strings, 'funcs': funcs, 'arch': arch, 'size': size, 'bintype': bintype, 'opsystem': opsystem}
    static_dict.update(info)
    for key, value in command_dict.items():
        cmd = key + " " + value + " " + file
        test = Popen(cmd, stdout=PIPE, stderr=PIPE, universal_newlines=True, shell=True)
        stdout, stderr = test.communicate()
        if stderr:
            print(stderr)
            pass
        else:
            static_dict[key] = stdout
    '''
    with open(file.split('/')[-1] + 'Analysis.txt', 'w') as g:
        g.write(str(file) + '\n')
        for key, value in static_dict.items():
            g.write('\n' + str(key) + '\n' + str(value) + '\n')
    '''

    return static_dict


def exit_module():
    print("This module is intended to be as an import to toolkit.py. ")
    sys.exit(1)


if __name__ == "__main__":
    exit_module()