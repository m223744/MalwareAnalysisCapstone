-----GHIDRA ANALYSIS REPORT-----File Processed: blackjack----------------------Functions Decompiled: -----FUNCTION NAME: play_dealer_hand
void play_dealer_hand(long param_1,int *param_2)

{
  int iVar1;
  uint uVar2;
  undefined8 uVar3;
  undefined local_118 [264];
  
  if (*param_2 == 2) {
    hand2str(param_1,*param_2,local_118);
    printf("Dealer\'s hand is %s\n",local_118);
    while( true ) {
      iVar1 = score_hand(param_1,*param_2);
      if (0x10 < iVar1) break;
      iVar1 = *param_2;
      *param_2 = iVar1 + 1;
      uVar3 = deal();
      *(undefined8 *)((long)iVar1 * 8 + param_1) = uVar3;
      hand2str(param_1,*param_2,local_118);
      printf("Dealer hits! New dealer hand is: %s\n");
    }
    iVar1 = score_hand(param_1,*param_2);
    if (iVar1 < 0x16) {
      uVar2 = score_hand(param_1,*param_2);
      printf("Dealer stands with a score of %d\n",(ulong)uVar2);
    }
    else {
      puts("Dealer busts.");
    }
  }
  else {
    puts("Error! play_dealer_hand called without exactly 2 cards in the dealer\'s hand!");
  }
  return;
}

-----FUNCTION NAME: __libc_csu_init
void __libc_csu_init(EVP_PKEY_CTX *param_1,undefined8 param_2,undefined8 param_3)

{
  long lVar1;
  
  _init(param_1);
  lVar1 = 0;
  do {
    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)param_1 & 0xffffffff,param_2,param_3)
    ;
    lVar1 = lVar1 + 1;
  } while (lVar1 != 1);
  return;
}

-----FUNCTION NAME: _init
int _init(EVP_PKEY_CTX *ctx)

{
  undefined *puVar1;
  
  puVar1 = PTR___gmon_start___00304fd8;
  if (PTR___gmon_start___00304fd8 != (undefined *)0x0) {
    puVar1 = (undefined *)(*(code *)PTR___gmon_start___00304fd8)();
  }
  return (int)puVar1;
}

-----FUNCTION NAME: is_soft
undefined8 is_soft(long param_1,int param_2)

{
  int iVar1;
  undefined8 uVar2;
  int local_14;
  int local_10;
  int local_c;
  
  local_c = 0;
  local_10 = 0;
  for (local_14 = 0; local_14 < param_2; local_14 = local_14 + 1) {
    iVar1 = *(int *)(param_1 + (long)local_14 * 8 + 4);
    if (iVar1 == 1) {
      local_c = local_c + 1;
      local_10 = local_10 + 1;
    }
    else if ((iVar1 < 1) || (2 < iVar1 - 0xbU)) {
      local_10 = local_10 + *(int *)(param_1 + (long)local_14 * 8 + 4);
    }
    else {
      local_10 = local_10 + 10;
    }
  }
  if ((local_c < 1) || (0xb < local_10)) {
    uVar2 = 0;
  }
  else {
    uVar2 = 1;
  }
  return uVar2;
}

-----FUNCTION NAME: EVP_MD_CTX_free
/* WARNING: Control flow encountered bad instruction data */

void EVP_MD_CTX_free(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* EVP_MD_CTX_free@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: srandom
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

void srandom(uint __seed)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* srandom@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: main
undefined8 main(void)

{
  int local_10;
  int local_c;
  
  local_10 = 100000;
  setlocale(6,"en_US.utf8");
  init_deck();
  puts("Welcome to Blackjack!");
  puts("Loading bank...");
  local_10 = load_bank();
  if (local_10 < 0) {
    puts("Error loading bank!  Sorry for the problem; have $100,000 on me.");
    local_10 = 100000;
  }
  while ((499 < local_10 && (local_c = get_bet(local_10), local_c != 0))) {
    play_hand(local_c,&local_10);
  }
  puts("Saving bank...");
  save_bank(local_10);
  if (local_10 < 500) {
    puts("Sorry, you\'re bankrupt.  Better luck next time!");
  }
  else {
    puts("See you next time!");
  }
  return 0;
}

-----FUNCTION NAME: get_action
undefined8 get_action(int param_1,int param_2)

{
  char local_a [2];
  
  do {
    if ((param_1 == 0) || (param_2 == 0)) {
      if (param_2 == 0) {
        if (param_1 == 0) {
          printf("[H]it or [S]tand? ");
        }
        else {
          printf("[H]it, [S]tand or [D]ouble down? ");
        }
      }
      else {
        printf("[H]it, [S]tand or s[P]lit? ");
      }
    }
    else {
      printf("[H]it, [S]tand, s[P]lit or [D]ouble down? ");
    }
    gets(local_a);
    switch(local_a[0]) {
    case 'D':
    case 'd':
      if (param_1 != 0) {
        return 3;
      }
      puts("Invalid input");
      break;
    default:
      puts("Invalid input");
      break;
    case 'H':
    case 'h':
      return 0;
    case 'P':
    case 'p':
      if (param_2 != 0) {
        return 2;
      }
      puts("Invalid input");
      break;
    case 'S':
    case 's':
      return 1;
    }
  } while( true );
}

-----FUNCTION NAME: play_hand
void play_hand(int param_1,int *param_2)

{
  int iVar1;
  uint uVar2;
  undefined8 uVar3;
  long lVar4;
  int local_26c;
  undefined local_268 [268];
  int local_15c;
  undefined8 local_158 [12];
  undefined8 local_f8 [12];
  undefined8 local_98;
  int iStack140;
  int local_40;
  int local_3c;
  int local_38;
  int local_34;
  int local_30;
  undefined4 local_2c;
  uint local_28;
  int local_24;
  int local_20;
  int local_1c;
  
  local_1c = 0;
  local_20 = 0;
  local_15c = 0;
  local_28 = (uint)(param_1 * 2 <= *param_2);
  local_2c = 0;
  local_30 = 0;
  local_34 = 0;
  local_38 = 0;
  local_3c = 0;
  shuffle();
  for (local_24 = 0; local_24 < 2; local_24 = local_24 + 1) {
    lVar4 = (long)local_1c;
    local_1c = local_1c + 1;
    uVar3 = deal();
    (&local_98)[lVar4] = uVar3;
  }
  if ((local_28 == 0) || (local_98._4_4_ != iStack140)) {
    local_2c = 0;
  }
  else {
    local_2c = 1;
  }
  for (local_24 = 0; local_24 < 2; local_24 = local_24 + 1) {
    lVar4 = (long)local_15c;
    local_15c = local_15c + 1;
    uVar3 = deal();
    local_158[lVar4] = uVar3;
  }
  card2str(local_158,local_268,0x100);
  printf("Dealer shows %s ??\n\n",local_268);
  local_26c = param_1;
LAB_00101f2e:
  do {
    while( true ) {
      iVar1 = score_hand(&local_98,local_1c);
      if ((0x14 < iVar1) || (local_34 != 0)) {
        hand2str(&local_98,local_1c,local_268,0x100);
        uVar2 = score_hand(&local_98,local_1c);
        printf("Players final hand is %s, with a score of %d.\n",local_268,(ulong)uVar2);
        iVar1 = score_hand(&local_98,local_1c);
        if (0x15 < iVar1) {
          puts("Player busts!");
          local_38 = 1;
          *param_2 = *param_2 - local_26c;
        }
        if (local_30 != 0) {
          printf("Split hand.  Working on second hand.");
          local_2c = 0;
          local_28 = 0;
          local_34 = 0;
          while ((iVar1 = score_hand(local_f8,local_20), iVar1 < 0x15 && (local_34 == 0))) {
            hand2str(local_f8,local_20,local_268,0x100);
            printf("Your hand is %s.\n",local_268);
            local_40 = get_action(0);
            if (local_40 == 0) {
              lVar4 = (long)local_20;
              local_20 = local_20 + 1;
              uVar3 = deal();
              local_f8[lVar4] = uVar3;
            }
            else if (local_40 == 1) {
              local_34 = 1;
            }
          }
          hand2str(local_f8,local_20,local_268,0x100);
          uVar2 = score_hand(local_f8,local_20);
          printf("Players final hand is %s, with a score of %d.\n",local_268,(ulong)uVar2);
        }
        iVar1 = score_hand(local_f8,local_20);
        if (0x15 < iVar1) {
          puts("Player busts!");
          local_3c = 1;
          *param_2 = *param_2 - local_26c;
        }
        if ((local_38 == 0) || ((local_30 != 0 && (local_3c == 0)))) {
          play_dealer_hand(local_158,&local_15c);
          if ((local_30 != 0) && (local_38 == 0)) {
            puts("Split hand.  Scoring first hand:");
          }
          if (local_38 == 0) {
            hand_results(&local_98,local_1c,local_158,local_15c,local_26c,param_2);
          }
          if ((local_30 != 0) && (local_3c == 0)) {
            puts("Split hand. Scoring second hand:");
            hand_results(local_f8,local_20,local_158,local_15c,local_26c,param_2);
          }
        }
        return;
      }
      hand2str(&local_98,local_1c,local_268,0x100);
      printf("Your hand is %s.\n");
      local_40 = get_action(local_28);
      local_28 = 0;
      local_2c = 0;
      if (local_40 != 1) break;
LAB_00101f26:
      local_34 = 1;
    }
    if (local_40 == 0) {
      lVar4 = (long)local_1c;
      local_1c = local_1c + 1;
      uVar3 = deal();
      (&local_98)[lVar4] = uVar3;
      goto LAB_00101f2e;
    }
    if (local_40 == 2) {
      puts("Split hand.  Working on first hand.");
      local_30 = 1;
      local_1c = 1;
      local_20 = 1;
    }
    else if (local_40 == 3) {
      local_26c = local_26c << 1;
      lVar4 = (long)local_1c;
      local_1c = local_1c + 1;
      uVar3 = deal();
      (&local_98)[lVar4] = uVar3;
      goto LAB_00101f26;
    }
  } while( true );
}

-----FUNCTION NAME: BIO_write
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int BIO_write(BIO *b,void *data,int len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* BIO_write@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: BIO_ctrl
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

long BIO_ctrl(BIO *bp,int cmd,long larg,void *parg)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* BIO_ctrl@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: EVP_DigestUpdate
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int EVP_DigestUpdate(EVP_MD_CTX *ctx,void *d,size_t cnt)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* EVP_DigestUpdate@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: EVP_DigestSignFinal
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int EVP_DigestSignFinal(EVP_MD_CTX *ctx,uchar *sigret,size_t *siglen)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* EVP_DigestSignFinal@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: strlen
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

size_t strlen(char *__s)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strlen@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: sign_it
/* WARNING: Removing unreachable block (ram,0x00102731) */
/* WARNING: Removing unreachable block (ram,0x00102581) */
/* WARNING: Removing unreachable block (ram,0x0010251a) */
/* WARNING: Removing unreachable block (ram,0x001025ee) */
/* WARNING: Removing unreachable block (ram,0x0010278a) */
/* WARNING: Removing unreachable block (ram,0x001024a9) */

bool sign_it(void *param_1,size_t param_2,uchar **param_3,size_t *param_4,EVP_PKEY *param_5)

{
  ulong uVar1;
  uchar *puVar2;
  size_t local_30;
  int local_24;
  EVP_MD *local_20;
  EVP_MD_CTX *local_18;
  int local_c;
  
  local_c = -1;
  if ((((param_1 == (void *)0x0) || (param_2 == 0)) || (param_3 == (uchar **)0x0)) ||
     (param_5 == (EVP_PKEY *)0x0)) {
                    /* WARNING: Subroutine does not return */
    __assert_fail("0","crypto.c",0x19,"sign_it");
  }
  if (*param_3 != (uchar *)0x0) {
    CRYPTO_free(*param_3);
  }
  *param_3 = (uchar *)0x0;
  *param_4 = 0;
  local_18 = (EVP_MD_CTX *)0x0;
  local_18 = (EVP_MD_CTX *)EVP_MD_CTX_new();
  if (local_18 == (EVP_MD_CTX *)0x0) {
                    /* WARNING: Subroutine does not return */
    __assert_fail("ctx != NULL","crypto.c",0x28,"sign_it");
  }
  if (local_18 == (EVP_MD_CTX *)0x0) {
    uVar1 = ERR_get_error();
    printf("EVP_MD_CTX_create failed, error 0x%lx\n",uVar1 & 0xffffffff);
  }
  else {
    local_20 = EVP_sha256();
    if (local_20 == (EVP_MD *)0x0) {
                    /* WARNING: Subroutine does not return */
      __assert_fail("md != NULL","crypto.c",0x2f,"sign_it");
    }
    if (local_20 == (EVP_MD *)0x0) {
      uVar1 = ERR_get_error();
      printf("EVP_get_digestbyname failed, error 0x%lx\n",uVar1 & 0xffffffff);
    }
    else {
      local_24 = EVP_DigestInit_ex(local_18,local_20,(ENGINE *)0x0);
      if (local_24 != 1) {
                    /* WARNING: Subroutine does not return */
        __assert_fail("rc == 1","crypto.c",0x36,"sign_it");
      }
      local_24 = EVP_DigestSignInit(local_18,(EVP_PKEY_CTX **)0x0,local_20,(ENGINE *)0x0,param_5);
      if (local_24 != 1) {
                    /* WARNING: Subroutine does not return */
        __assert_fail("rc == 1","crypto.c",0x3d,"sign_it");
      }
      local_24 = EVP_DigestUpdate(local_18,param_1,param_2);
      if (local_24 != 1) {
                    /* WARNING: Subroutine does not return */
        __assert_fail("rc == 1","crypto.c",0x44,"sign_it");
      }
      local_30 = 0;
      local_24 = EVP_DigestSignFinal(local_18,(uchar *)0x0,&local_30);
      if (local_24 != 1) {
                    /* WARNING: Subroutine does not return */
        __assert_fail("rc == 1","crypto.c",0x4c,"sign_it");
      }
      if (local_30 == 0) {
                    /* WARNING: Subroutine does not return */
        __assert_fail("req > 0","crypto.c",0x52,"sign_it");
      }
      if (local_30 == 0) {
        uVar1 = ERR_get_error();
        printf("EVP_DigestSignFinal failed (2), error 0x%lx\n",uVar1 & 0xffffffff);
      }
      else {
        puVar2 = (uchar *)CRYPTO_malloc((int)local_30,"crypto.c",0x58);
        *param_3 = puVar2;
        if (*param_3 == (uchar *)0x0) {
                    /* WARNING: Subroutine does not return */
          __assert_fail("*sig != NULL","crypto.c",0x59,"sign_it");
        }
        if (*param_3 == (uchar *)0x0) {
          uVar1 = ERR_get_error();
          printf("OPENSSL_malloc failed, error 0x%lx\n",uVar1 & 0xffffffff);
        }
        else {
          *param_4 = local_30;
          local_24 = EVP_DigestSignFinal(local_18,*param_3,param_4);
          if (local_24 != 1) {
                    /* WARNING: Subroutine does not return */
            __assert_fail("rc == 1","crypto.c",0x61,"sign_it");
          }
          if (*param_4 != local_30) {
                    /* WARNING: Subroutine does not return */
            __assert_fail("req == *slen","crypto.c",0x67,"sign_it");
          }
          local_c = 0;
        }
      }
    }
  }
  if (local_18 != (EVP_MD_CTX *)0x0) {
    EVP_MD_CTX_free(local_18);
  }
  return local_c != 0;
}

-----FUNCTION NAME: EVP_sha256
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

EVP_MD * EVP_sha256(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* EVP_sha256@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: frame_dummy
void frame_dummy(void)

{
  register_tm_clones();
  return;
}

-----FUNCTION NAME: score_hand
int score_hand(long param_1,int param_2)

{
  int iVar1;
  int local_14;
  int local_10;
  int local_c;
  
  local_10 = 0;
  local_14 = 0;
  for (local_c = 0; local_c < param_2; local_c = local_c + 1) {
    iVar1 = *(int *)(param_1 + (long)local_c * 8 + 4);
    if (iVar1 == 1) {
      local_10 = local_10 + 1;
      local_14 = local_14 + 1;
    }
    else if ((iVar1 < 1) || (2 < iVar1 - 0xbU)) {
      local_10 = local_10 + *(int *)(param_1 + (long)local_c * 8 + 4);
    }
    else {
      local_10 = local_10 + 10;
    }
  }
  for (; (0 < local_14 && (local_10 < 0xc)); local_10 = local_10 + 10) {
    local_14 = local_14 + -1;
  }
  return local_10;
}

-----FUNCTION NAME: _ITM_registerTMCloneTable
/* WARNING: Control flow encountered bad instruction data */

void _ITM_registerTMCloneTable(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}

-----FUNCTION NAME: __cxa_finalize
/* WARNING: Control flow encountered bad instruction data */

void __cxa_finalize(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* __cxa_finalize@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: get_bet
int get_bet(uint param_1)

{
  int iVar1;
  int local_c;
  
  while( true ) {
    while( true ) {
      printf("You have $%\'d. How much would you like to bet? (Min $500, max $10,000, $0 to quit) $"
             ,(ulong)param_1);
      iVar1 = __isoc99_scanf(&DAT_001034f5);
      if (iVar1 == 1) break;
      puts("Please enter a number.");
      __isoc99_scanf(&DAT_00103572);
    }
    __isoc99_scanf(&DAT_001034f9);
    if (local_c == 0) break;
    if (local_c < 500) {
      puts("Sorry, the minimum bet is 500.");
    }
    else if (local_c < 0x2711) {
      if (local_c <= (int)param_1) {
        return local_c;
      }
      printf("Sorry, you only have %d.\n",(ulong)param_1);
    }
    else {
      puts("Sorry, the maximum bet is 10000.");
    }
  }
  return 0;
}

-----FUNCTION NAME: BIO_free_all
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

void BIO_free_all(BIO *a)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* BIO_free_all@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: OPENSSL_cleanse
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

void OPENSSL_cleanse(void *ptr,size_t len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* OPENSSL_cleanse@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: ERR_get_error
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

ulong ERR_get_error(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* ERR_get_error@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: __gmon_start__
/* WARNING: Control flow encountered bad instruction data */

void __gmon_start__(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}

-----FUNCTION NAME: hand2str
void hand2str(long param_1,int param_2,long param_3,int param_4)

{
  int iVar1;
  undefined local_28 [24];
  int local_10;
  int local_c;
  
  local_10 = 0;
  for (local_c = 0; local_c < param_2; local_c = local_c + 1) {
    card2str((long)local_c * 8 + param_1,local_28,0x10);
    iVar1 = snprintf((char *)(local_10 + param_3),(long)(param_4 - local_10),"%s ",local_28);
    local_10 = local_10 + iVar1;
  }
  return;
}

-----FUNCTION NAME: hand_results
void hand_results(undefined8 param_1,undefined4 param_2,undefined8 param_3,undefined4 param_4,
                 int param_5,int *param_6)

{
  int iVar1;
  uint uVar2;
  uint uVar3;
  
  iVar1 = is_blackjack(param_3,param_4);
  if (iVar1 == 0) {
    iVar1 = is_blackjack(param_1,param_2);
    if (iVar1 == 0) {
      uVar2 = score_hand(param_1,param_2);
      uVar3 = score_hand(param_3,param_4);
      if ((int)uVar3 < 0x16) {
        printf("Player shows %d, dealer shows %d.\n",(ulong)uVar2,(ulong)uVar3);
        if ((int)uVar2 < (int)uVar3) {
          puts("Player loses.");
          *param_6 = *param_6 - param_5;
        }
        else if ((int)uVar3 < (int)uVar2) {
          puts("Player wins!");
          *param_6 = *param_6 + param_5;
        }
        else {
          puts("Hand is a push.");
        }
      }
      else {
        *param_6 = *param_6 + param_5;
      }
    }
    else {
      puts("Player has a blackjack! You win 3:2!");
      *param_6 = *param_6 + (param_5 * 3) / 2;
    }
  }
  else {
    iVar1 = is_blackjack(param_1,param_2);
    if (iVar1 == 0) {
      puts("Dealer has a blackjack! Sorry, you lose.");
      *param_6 = *param_6 - param_5;
    }
    else {
      printf("Player and Dealer both have a blackjack! Hand is a push.");
    }
  }
  return;
}

-----FUNCTION NAME: __libc_csu_fini
void __libc_csu_fini(void)

{
  return;
}

-----FUNCTION NAME: CRYPTO_malloc
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

void * CRYPTO_malloc(int num,char *file,int line)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* CRYPTO_malloc@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: BIO_new
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

BIO * BIO_new(BIO_METHOD *type)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* BIO_new@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: get_mac_key
void get_mac_key(void)

{
  EVP_PKEY_new_mac_key(0x357,(ENGINE *)0x0,secret_key,secret_key_len);
  return;
}

-----FUNCTION NAME: BIO_f_base64
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

BIO_METHOD * BIO_f_base64(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* BIO_f_base64@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: card2str
void card2str(int *param_1,char *param_2,size_t param_3)

{
  int iVar1;
  char local_1b [3];
  char *local_18;
  undefined *local_10;
  
  iVar1 = *param_1;
  if (iVar1 == 1) {
    local_10 = &DAT_0010326c;
  }
  else if (iVar1 == 0) {
    local_10 = &DAT_00103268;
  }
  else if (iVar1 == 2) {
    local_10 = &DAT_00103270;
  }
  else if (iVar1 == 3) {
    local_10 = &DAT_00103274;
  }
  else {
    local_10 = &DAT_00103278;
  }
  iVar1 = param_1[1];
  if (iVar1 == 0xb) {
    local_18 = "J";
    goto LAB_00101420;
  }
  if (iVar1 < 0xc) {
    if (iVar1 == 1) {
      local_18 = "A";
      goto LAB_00101420;
    }
  }
  else {
    if (iVar1 == 0xc) {
      local_18 = "Q";
      goto LAB_00101420;
    }
    if (iVar1 == 0xd) {
      local_18 = "K";
      goto LAB_00101420;
    }
  }
  snprintf(local_1b,3,"%d",(ulong)(uint)param_1[1]);
  local_18 = local_1b;
LAB_00101420:
  snprintf(param_2,param_3,"%s%s",local_18,local_10);
  return;
}

-----FUNCTION NAME: __assert_fail
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

void __assert_fail(char *__assertion,char *__file,uint __line,char *__function)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* __assert_fail@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: load_bank
uint load_bank(void)

{
  int iVar1;
  undefined8 uVar2;
  uint local_34c;
  undefined8 local_348;
  undefined8 local_340;
  undefined local_338 [256];
  char local_238 [256];
  char local_138 [264];
  long local_30;
  int local_24;
  FILE *local_20;
  char *local_18;
  undefined8 local_10;
  
  local_340 = 0;
  local_10 = 0;
  local_18 = getenv("USER");
  if (local_18 == (char *)0x0) {
    fwrite("Failed to get user id loading bank.\n",1,0x24,stderr);
    local_34c = 0xffffffff;
  }
  else {
    snprintf(local_138,0x100,"%s.bank",local_18);
    local_20 = fopen(local_138,"r");
    if (local_20 == (FILE *)0x0) {
      perror("Error opening bank file for reading");
      local_34c = 0xffffffff;
    }
    else {
      local_24 = __isoc99_fscanf(local_20,"Bank: %d\n",&local_34c);
      if (local_24 == 1) {
        local_24 = __isoc99_fscanf(local_20,"HMAC: %255s\n",local_338);
        if (local_24 == 1) {
          Base64Decode(local_338,&local_340,&local_348);
          iVar1 = snprintf(local_238,0x100,"%s|%d",local_18,(ulong)local_34c);
          local_30 = (long)iVar1;
          uVar2 = get_mac_key();
          iVar1 = verify_it(local_238,local_30,local_340,local_348,uVar2);
          if (iVar1 == 0) {
            fwrite("Error verifying bank file signature!\n",1,0x25,stderr);
            local_34c = 0xffffffff;
          }
        }
        else {
          fwrite("Format error reading from bank file!\n",1,0x25,stderr);
          fclose(local_20);
          local_34c = 0xffffffff;
        }
      }
      else {
        fwrite("Format error reading from bank file!\n",1,0x25,stderr);
        fclose(local_20);
        local_34c = 0xffffffff;
      }
    }
  }
  return local_34c;
}

-----FUNCTION NAME: setlocale
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

char * setlocale(int __category,char *__locale)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* setlocale@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: Base64Decode
undefined8 Base64Decode(char *param_1,void **param_2,long *param_3)

{
  int iVar1;
  int iVar2;
  void *pvVar3;
  BIO *pBVar4;
  BIO_METHOD *type;
  BIO *b;
  size_t sVar5;
  
  iVar1 = calcDecodeLength(param_1);
  pvVar3 = malloc((long)(iVar1 + 1));
  *param_2 = pvVar3;
  *(undefined *)((long)iVar1 + (long)*param_2) = 0;
  pBVar4 = BIO_new_mem_buf(param_1,-1);
  type = BIO_f_base64();
  b = BIO_new(type);
  pBVar4 = BIO_push(b,pBVar4);
  BIO_set_flags(pBVar4,0x100);
  sVar5 = strlen(param_1);
  iVar2 = BIO_read(pBVar4,*param_2,(int)sVar5);
  *param_3 = (long)iVar2;
  if (*param_3 != (long)iVar1) {
                    /* WARNING: Subroutine does not return */
    __assert_fail("*length == decodeLen","crypto.c",0xf9,"Base64Decode");
  }
  BIO_free_all(pBVar4);
  return 0;
}

-----FUNCTION NAME: deal
undefined8 deal(void)

{
  long lVar1;
  
  lVar1 = (long)dealt;
  dealt = dealt + 1;
  return *(undefined8 *)(deck + lVar1 * 8);
}

-----FUNCTION NAME: BIO_set_flags
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

void BIO_set_flags(BIO *b,int flags)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* BIO_set_flags@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: _start
void _start(undefined8 param_1,undefined8 param_2,undefined8 param_3)

{
  undefined8 in_stack_00000000;
  undefined auStack8 [8];
  
  (*(code *)PTR___libc_start_main_00304fe0)
            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,param_3,
             auStack8);
  do {
                    /* WARNING: Do nothing block with infinite loop */
  } while( true );
}

-----FUNCTION NAME: is_blackjack
undefined8 is_blackjack(long param_1,int param_2)

{
  undefined8 uVar1;
  
  if (param_2 == 2) {
    if ((*(int *)(param_1 + 4) == 1) && (9 < *(int *)(param_1 + 0xc))) {
      uVar1 = 1;
    }
    else if ((*(int *)(param_1 + 4) < 10) || (*(int *)(param_1 + 0xc) != 1)) {
      uVar1 = 0;
    }
    else {
      uVar1 = 1;
    }
  }
  else {
    uVar1 = 0;
  }
  return uVar1;
}

-----FUNCTION NAME: BIO_new_mem_buf
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

BIO * BIO_new_mem_buf(void *buf,int len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* BIO_new_mem_buf@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: CRYPTO_memcmp
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int CRYPTO_memcmp(void *a,void *b,size_t len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* CRYPTO_memcmp@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: EVP_DigestInit_ex
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int EVP_DigestInit_ex(EVP_MD_CTX *ctx,EVP_MD *type,ENGINE *impl)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* EVP_DigestInit_ex@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: printf
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int printf(char *__format,...)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* printf@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: save_bank
undefined8 save_bank(uint param_1)

{
  int iVar1;
  undefined8 uVar2;
  undefined8 local_240;
  undefined8 local_238;
  undefined8 local_230;
  char local_228 [256];
  char local_128 [264];
  long local_20;
  FILE *local_18;
  char *local_10;
  
  local_230 = 0;
  local_238 = 0;
  local_10 = getenv("USER");
  if (local_10 == (char *)0x0) {
    fwrite("Failed to get user id saving bank.\n",1,0x23,stderr);
    uVar2 = 0xffffffff;
  }
  else {
    snprintf(local_128,0x100,"%s.bank",local_10);
    local_18 = fopen(local_128,"w");
    if (local_18 == (FILE *)0x0) {
      perror("Error opening bank file for writing");
      uVar2 = 0xffffffff;
    }
    else {
      iVar1 = snprintf(local_228,0x100,"%s|%d",local_10,(ulong)param_1);
      local_20 = (long)iVar1;
      uVar2 = get_mac_key();
      sign_it(local_228,local_20,&local_230,&local_240,uVar2);
      Base64Encode(local_230,local_240,&local_238);
      fprintf(local_18,"Bank: %d\n",(ulong)param_1);
      fprintf(local_18,"HMAC: %s\n",local_238);
      fclose(local_18);
      uVar2 = 0;
    }
  }
  return uVar2;
}

-----FUNCTION NAME: deregister_tm_clones
/* WARNING: Removing unreachable block (ram,0x00101267) */
/* WARNING: Removing unreachable block (ram,0x00101273) */

void deregister_tm_clones(void)

{
  return;
}

-----FUNCTION NAME: random
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

long random(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* random@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: EVP_DigestSignInit
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int EVP_DigestSignInit(EVP_MD_CTX *ctx,EVP_PKEY_CTX **pctx,EVP_MD *type,ENGINE *e,EVP_PKEY *pkey)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* EVP_DigestSignInit@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: __isoc99_scanf
/* WARNING: Control flow encountered bad instruction data */

void __isoc99_scanf(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* __isoc99_scanf@@GLIBC_2.7 */
  halt_baddata();
}

-----FUNCTION NAME: __libc_start_main
/* WARNING: Control flow encountered bad instruction data */

void __libc_start_main(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* __libc_start_main@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: Base64Encode
undefined8 Base64Encode(void *param_1,int param_2,void *param_3)

{
  BIO_METHOD *pBVar1;
  BIO *pBVar2;
  BIO *append;
  
  pBVar1 = BIO_f_base64();
  pBVar2 = BIO_new(pBVar1);
  pBVar1 = BIO_s_mem();
  append = BIO_new(pBVar1);
  pBVar2 = BIO_push(pBVar2,append);
  BIO_set_flags(pBVar2,0x100);
  BIO_write(pBVar2,param_1,param_2);
  BIO_ctrl(pBVar2,0xb,0,(void *)0x0);
  BIO_ctrl(pBVar2,3,0,param_3);
  BIO_ctrl(pBVar2,9,0,(void *)0x0);
  BIO_free_all(pBVar2);
  return 0;
}

-----FUNCTION NAME: _ITM_deregisterTMCloneTable
/* WARNING: Control flow encountered bad instruction data */

void _ITM_deregisterTMCloneTable(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}

-----FUNCTION NAME: verify_it
/* WARNING: Removing unreachable block (ram,0x00102a2c) */
/* WARNING: Removing unreachable block (ram,0x001029c5) */
/* WARNING: Removing unreachable block (ram,0x00102a9b) */
/* WARNING: Removing unreachable block (ram,0x00102951) */

bool verify_it(void *param_1,size_t param_2,void *param_3,ulong param_4,EVP_PKEY *param_5)

{
  int iVar1;
  ulong uVar2;
  uchar local_78 [64];
  ulong local_38;
  ulong local_30;
  int local_24;
  EVP_MD *local_20;
  EVP_MD_CTX *local_18;
  uint local_c;
  
  local_c = 0xffffffff;
  if ((((param_1 == (void *)0x0) || (param_2 == 0)) || (param_3 == (void *)0x0)) ||
     ((param_4 == 0 || (param_5 == (EVP_PKEY *)0x0)))) {
                    /* WARNING: Subroutine does not return */
    __assert_fail("0","crypto.c",0x80,"verify_it");
  }
  local_18 = (EVP_MD_CTX *)0x0;
  local_18 = (EVP_MD_CTX *)EVP_MD_CTX_new();
  if (local_18 == (EVP_MD_CTX *)0x0) {
                    /* WARNING: Subroutine does not return */
    __assert_fail("ctx != NULL","crypto.c",0x89,"verify_it");
  }
  if (local_18 == (EVP_MD_CTX *)0x0) {
    uVar2 = ERR_get_error();
    printf("EVP_MD_CTX_create failed, error 0x%lx\n",uVar2 & 0xffffffff);
  }
  else {
    local_20 = EVP_sha256();
    if (local_20 == (EVP_MD *)0x0) {
                    /* WARNING: Subroutine does not return */
      __assert_fail("md != NULL","crypto.c",0x90,"verify_it");
    }
    if (local_20 == (EVP_MD *)0x0) {
      uVar2 = ERR_get_error();
      printf("EVP_get_digestbyname failed, error 0x%lx\n",uVar2 & 0xffffffff);
    }
    else {
      local_24 = EVP_DigestInit_ex(local_18,local_20,(ENGINE *)0x0);
      if (local_24 != 1) {
                    /* WARNING: Subroutine does not return */
        __assert_fail("rc == 1","crypto.c",0x97,"verify_it");
      }
      local_24 = EVP_DigestSignInit(local_18,(EVP_PKEY_CTX **)0x0,local_20,(ENGINE *)0x0,param_5);
      if (local_24 != 1) {
                    /* WARNING: Subroutine does not return */
        __assert_fail("rc == 1","crypto.c",0x9e,"verify_it");
      }
      local_24 = EVP_DigestUpdate(local_18,param_1,param_2);
      if (local_24 != 1) {
                    /* WARNING: Subroutine does not return */
        __assert_fail("rc == 1","crypto.c",0xa5,"verify_it");
      }
      local_38 = 0x40;
      local_24 = EVP_DigestSignFinal(local_18,local_78,&local_38);
      if (local_24 != 1) {
                    /* WARNING: Subroutine does not return */
        __assert_fail("rc == 1","crypto.c",0xaf,"verify_it");
      }
      if (local_38 == 0) {
                    /* WARNING: Subroutine does not return */
        __assert_fail("size > 0","crypto.c",0xb5,"verify_it");
      }
      if (local_38 == 0) {
        puts("EVP_DigestSignFinal failed (2)");
      }
      else {
        local_30 = local_38;
        if (param_4 <= local_38) {
          local_30 = param_4;
        }
        iVar1 = CRYPTO_memcmp(param_3,local_78,local_30);
        local_c = (uint)(iVar1 == 0);
        OPENSSL_cleanse(local_78,0x40);
      }
    }
  }
  if (local_18 != (EVP_MD_CTX *)0x0) {
    EVP_MD_CTX_free(local_18);
  }
  return local_c != 0;
}

-----FUNCTION NAME: snprintf
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int snprintf(char *__s,size_t __maxlen,char *__format,...)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* snprintf@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: EVP_MD_CTX_new
/* WARNING: Control flow encountered bad instruction data */

void EVP_MD_CTX_new(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* EVP_MD_CTX_new@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: getenv
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

char * getenv(char *__name)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* getenv@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: malloc
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

void * malloc(size_t __size)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* malloc@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: fopen
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

FILE * fopen(char *__filename,char *__modes)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fopen@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: register_tm_clones
/* WARNING: Removing unreachable block (ram,0x001012b8) */
/* WARNING: Removing unreachable block (ram,0x001012c4) */

void register_tm_clones(void)

{
  return;
}

-----FUNCTION NAME: BIO_push
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

BIO * BIO_push(BIO *b,BIO *append)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* BIO_push@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: CRYPTO_free
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

void CRYPTO_free(void *ptr)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* CRYPTO_free@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: EVP_PKEY_new_mac_key
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

EVP_PKEY * EVP_PKEY_new_mac_key(int type,ENGINE *e,uchar *key,int keylen)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* EVP_PKEY_new_mac_key@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: init_deck
void init_deck(void)

{
  init_suit(deck,0);
  init_suit(0x3050e8,1);
  init_suit(0x305150,2);
  init_suit(0x3051b8,3);
  return;
}

-----FUNCTION NAME: fclose
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int fclose(FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fclose@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: fwrite
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

size_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fwrite@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: FUN_00100f60
void FUN_00100f60(void)

{
                    /* WARNING: Treating indirect jump as call */
  (*(code *)PTR_00304e80)();
  return;
}

-----FUNCTION NAME: gets
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

char * gets(char *__s)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* gets@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: fprintf
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int fprintf(FILE *__stream,char *__format,...)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fprintf@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: calcDecodeLength
long calcDecodeLength(char *param_1)

{
  size_t sVar1;
  long local_10;
  
  sVar1 = strlen(param_1);
  local_10 = 0;
  if ((param_1[sVar1 - 1] == '=') && (param_1[sVar1 - 2] == '=')) {
    local_10 = 2;
  }
  else if (param_1[sVar1 - 1] == '=') {
    local_10 = 1;
  }
  return (sVar1 * 3 >> 2) - local_10;
}

-----FUNCTION NAME: puts
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int puts(char *__s)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* puts@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: __isoc99_fscanf
/* WARNING: Control flow encountered bad instruction data */

void __isoc99_fscanf(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* __isoc99_fscanf@@GLIBC_2.7 */
  halt_baddata();
}

-----FUNCTION NAME: BIO_s_mem
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

BIO_METHOD * BIO_s_mem(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* BIO_s_mem@@OPENSSL_1_1_0 */
  halt_baddata();
}

-----FUNCTION NAME: __do_global_dtors_aux
void __do_global_dtors_aux(void)

{
  if (completed_7696 == '\0') {
    if (PTR___cxa_finalize_00304ff8 != (undefined *)0x0) {
      __cxa_finalize(__dso_handle);
    }
    deregister_tm_clones();
    completed_7696 = 1;
    return;
  }
  return;
}

-----FUNCTION NAME: _fini
void _fini(void)

{
  return;
}

-----FUNCTION NAME: init_suit
void init_suit(long param_1,undefined4 param_2)

{
  time_t tVar1;
  int local_c;
  
  tVar1 = time((time_t *)0x0);
  srandom((uint)tVar1);
  for (local_c = 0; local_c < 0xd; local_c = local_c + 1) {
    *(undefined4 *)((long)local_c * 8 + param_1) = param_2;
    *(int *)(param_1 + (long)local_c * 8 + 4) = local_c + 1;
  }
  return;
}

-----FUNCTION NAME: perror
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

void perror(char *__s)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* perror@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: time
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

time_t time(time_t *__timer)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* time@@GLIBC_2.2.5 */
  halt_baddata();
}

-----FUNCTION NAME: shuffle
void shuffle(void)

{
  undefined8 uVar1;
  int iVar2;
  long lVar3;
  int local_c;
  
  dealt = 0;
  for (local_c = 0x33; 0 < local_c; local_c = local_c + -1) {
    lVar3 = random();
    iVar2 = (int)(lVar3 % (long)(local_c + 1));
    uVar1 = *(undefined8 *)(deck + (long)local_c * 8);
    *(undefined8 *)(deck + (long)local_c * 8) = *(undefined8 *)(deck + (long)iVar2 * 8);
    *(undefined8 *)(deck + (long)iVar2 * 8) = uVar1;
  }
  return;
}

-----FUNCTION NAME: BIO_read
/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention yet parameter storage is locked */

int BIO_read(BIO *b,void *data,int len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* BIO_read@@OPENSSL_1_1_0 */
  halt_baddata();
}

