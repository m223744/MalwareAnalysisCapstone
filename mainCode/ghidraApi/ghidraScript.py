#Reuired Modules:
#standard python:
import sys
import os
import subprocess
import hashlib
import json

# import mysql.connector
# from mysql.connector import Error

#ghidra:
from ghidra.app.decompiler import DecompInterface
from ghidra.util.task import ConsoleTaskMonitor


class Binary:
    '''
    Create a binary "class" that contains a dictionary. Keys = name of
    the command run against the binary, values = the output of the command.
    Manipulate __str__ to print pretty ouptut. Define self.___() for specifics
    to the binary (hash, for example)
    '''

    def __init__(self, fileName):
        self.binaryFile = fileName # varchar(32)
        self.functions = {} #Convert to JSON
        #sys data:
        self.md5 = None # CHAR(16)
        self.sha256 = None # CHAR(64)
        self.hd = None # hexdump, LONGBLOB
        self.path = None
        self.metadata = None
        '''
        Ransomware/Other. Possibly read from filename?
        Need to figure which files will be analyzed
        '''
        self.category = None # VARCHAR
        self.getSysData()


    # def __str__(self):
    #     print(f"\n{color.BOLD}Provided Binary File:{color.END} {self.binaryFile}\n")
    #     for key, value in self.binaryData.items():
    #         print(f"{color.BOLD}{key}{color.END}: {value}\n")
    #     return ''

    def __str__(self):
        print("Provided Binary File: " + self.binaryFile)
        print(self.functions.keys())
        print("MD5: " + self.md5)
        print("SHA256: " + self.sha256)



    def jsonifyDicts(self):
        self.functions = json.dumps(self.functions)
        self.metadata = json.dumps(self.metadata)
        return


def ghidraPull(binary):
    '''
    Assuming script will be called for each binary by ghidra headless as it
    iterates thru files. Need to reduce O(n) as much as possible, or maybe rewrite this in
    java
    '''
    #Setup Ghidra Interface, pull data
    #current program is predefined global
    program = currentProgram #rename

    metadata = program.getMetadata() # Returns dictionary of ghidra metadata
    programName = metadata['Program Name'] #Unicode binary name
    binary.md5 = metadata['Executable MD5'] # Unicode MD5
    binary.sha256 = metadata['Executable SHA256'] # Unicode SHA256
    binary.path = metadata['Executable Location'] # Unicode Path of binary
    self.metadata = metadata



    #Set up decompiler
    decompinterface = DecompInterface()
    #Open program in decompiler
    decompinterface.openProgram(program); #returns true
    #Get functions, true means forward
    functions = program.getFunctionManager().getFunctions(True)



    #Start iterating thru functions
    for function in list(functions):

        # decompile each function
        tokengrp = decompinterface.decompileFunction(function, 0, ConsoleTaskMonitor())
        # c code for function
        c = tokengrp.getDecompiledFunction().getC()
        #Get function name
        funcName = function.getName()

        #add function to binary func dict.
        binary.functions[funcName] = c



# def create_connection(host_name, user_name, user_password):
#     connection = None
#     try:
#         connection = mysql.connector.connect(
#             host = host_name,
#             user = user_name,
#             passwd = user_password
#         )
#         print("Connection Successful")
#     except Error as e:
#         print(f"The error '{e}' occured")
#
#     return connection


def addToDb(binary):
    binary.jsonifyDicts()
    return


#current program is a predefined global
program = currentProgram
programName = str(program).split()[0]
#Setup data structure
binary = Binary(programName)


ghidraPull(binary)

print(binary)
