#Reuired Modules:
#standard python:
import sys
import os
import subprocess
import hashlib
import json

#ghidra:
from ghidra.app.decompiler import DecompInterface
from ghidra.util.task import ConsoleTaskMonitor


class Binary:
    '''
    Create a binary "class" that contains a dictionary. Keys = name of
    the command run against the binary, values = the output of the command.
    Manipulate __str__ to print pretty ouptut. Define self.___() for specifics
    to the binary (hash, for example)
    '''

    def __init__(self, fileName):
        self.binaryFile = fileName # varchar(32)
        self.functions = {} #Convert to JSON
        #sys data:
        self.md5 = None # CHAR(16)
        self.sha1 = None # CHAR(40)
        self.sha256 = None # CHAR(64)
        self.hd = None # hexdump, LONGBLOB
        '''
        Ransomware/Other. Possibly read from filename?
        Need to figure which files will be analyzed
        '''
        self.category = None # VARCHAR
        self.getSysData()
        ghidraPull

    def __str__(self):
        print(f"\n{color.BOLD}Provided Binary File:{color.END} {self.binaryFile}\n")
        for key, value in self.binaryData.items():
            print(f"{color.BOLD}{key}{color.END}: {value}\n")
        return ''

    def getSysData(self):
        '''
        @Dylan can we get your system calls in here?
        '''
        #load hash algos
        md5 = hashlib.md5()
        sha1 = hashlib.sha1()
        sha256 = hashlib.sha256()

        #open file to read
        with open(self.binaryFile, 'rb') as f:
            '''
            @Dylan why the while true?
            '''

            while True:
                data = f.read()
                if not data:
                    break
                md5.update(data)
                sha1.update(data)
                sha256.update(data)
                self.hd = data
            self.md5 = md5.hexdigest()
            self.sha1 = sha1.hexdigest()
            self.sha256 = sha256.hexdigest()

    def jsonifyFunc(self):
        self.functions = json.dumps(self.functions)
        return

#current program is a predefined global
program = currentProgram
programName = str(program).split()[0]
#Setup data structure
binary = Binary(programName)

def ghidraPull(binary):
    '''
    Assuming script will be called for each binary by ghidra headless as it
    iterates thru files. Need to reduce O(n) as much as possible, or maybe rewrite this in
    java
    '''
    #Setup Ghidra Interface


    #Set up decompiler
    decompinterface = DecompInterface()
    #Open program in decompiler
    decompinterface.openProgram(program); #returns true
    #Get functions, true means forward
    functions = program.getFunctionManager().getFunctions(True)



    #Get PCode and add to binary.pcode
    PCode = ''


    #Start iterating thru functions
    for function in list(functions):

        # decompile each function
        tokengrp = decompinterface.decompileFunction(function, 0, ConsoleTaskMonitor())
        # c code for function
        c = tokengrp.getDecompiledFunction().getC()
        #Get function name
        funcName = function.getName()

        #add function to binary func dict.
        binary.functions[funcName] = c



'''
set up database here
'''
def addToDb(binary):
    '''
    When called with binary class as input, add collected data
    to data storage solution, possibly SQL Database, XML File, or JSON file?

    Code could be formatted as xml to add as xml or longblob in sql?
    '''
    return
