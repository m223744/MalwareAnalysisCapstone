#Reuired Modules:
#standard python:
import sys
import argparse
import os
import subprocess
import hashlib

#ghidra:
from ghidra.app.decompiler import DecompInterface
from ghidra.util.task import ConsoleTaskMonitor


class binary:
    '''
    03NOV21: Create a binary "class" that contains a dictionary. Keys = name of
    the command run against the binary, values = the output of the command.
    Manipulate __str__ to print pretty ouptut. Define self.___() for specifics
    to the binary (hash, for example)
    '''

    def __init__(self, fileName):
        self.binaryFile = fileName
        self.binaryData = {}
        self.functions = {}
        #sys data:
        self.md5 = None
        self.sha1 = None
        self.sha256 = None
        self.hd = None # hexdump
        '''
        Ransomware/Other. Possibly read from filename?
        Need to figure which files will be analyzed
        '''
        self.category = None
        self.getSysData()

    def __str__(self):
        print(f"\n{color.BOLD}Provided Binary File:{color.END} {self.binaryFile}\n")
        for key, value in self.binaryData.items():
            print(f"{color.BOLD}{key}{color.END}: {value}\n")
        return ''

    def getSysData(self):
        '''
        @Dylan can we get your system calls in here?
        '''
        #load hash algos
        md5 = hashlib.md5()
        sha1 = hashlib.sha1()
        sha256 = hashlib.sha256()

        #open file to read
        with open(self.binaryFile, 'rb') as f:
            '''
            @Dylan why the while true?
            '''

            while True:
                data = f.read()
                if not data:
                    break
                md5.update(data)
                sha1.update(data)
                sha256.update(data)
                self.hd = data
            self.md5 = md5
            self.sha1 = sha1
            self.sha256 = sha256
            self.binaryData['md5'] = self.md5.hexdigest()
            self.binaryData['sha1'] = self.sha1.hexdigest()
            self.binaryData['sha256'] = self.sha256.hexdigest()


'''Set up output database here

'''

def ghidraPull():
    '''
    Assuming script will be called for each binary by ghidra headless as it
    iterates thru files. Need to reduce O as much as possible, or maybe rewrite this in
    java
    '''
    #Setup Ghidra Interface

    #current program is a predefined global
    program = currentProgram
    programName = str(program).split()[0]
    #Set up decompiler
    decompinterface = DecompInterface()
    #Open program in decompiler
    decompinterface.openProgram(program); #returns true
    #Get functions, true means forward
    functions = program.getFunctionManager().getFunctions(True)

    #Setup data structure
    binary = binary(programName)

    #Get PCode and add to binary.pcode
    PCode = ''


    #Start iterating thru functions
    for function in list(functions):

        # decompile each function
        tokengrp = decompinterface.decompileFunction(function, 0, ConsoleTaskMonitor())
        # c code for function
        c = tokengrp.getDecompiledFunction().getC()
        #Get function name
        funcName = function.getName()

        #add function to binary func dict.
        binary.functions[funcName] = c




def addToDb(binary):
    '''
    When called with binary class as input, add collected data
    to data storage solution, possibly SQL Database, XML File, or JSON file?

    Code could be formatted as xml to add as xml or longblob in sql?
    '''
    return
