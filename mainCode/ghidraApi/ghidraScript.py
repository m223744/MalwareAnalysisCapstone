# Reuired Modules:
# standard python:
from asyncore import write
import sys
import argparse
import os
import subprocess
import hashlib

# ghidra:
from ghidra.app.decompiler import DecompInterface
from ghidra.util.task import ConsoleTaskMonitor


class Binary:
    """
    03NOV21: Create a Binary "class" that contains a dictionary. Keys = name of
    the command run against the Binary, values = the output of the command.
    Manipulate __str__ to print pretty ouptut. Define self.___() for specifics
    to the Binary (hash, for example)
    """

    def __init__(self, fileName):
        self.binaryFile = fileName
        self.binaryData = {}
        self.functions = {}

        self.category = None

    def __str__(self):
        print("-----GHIDRA ANALYSIS-----")
        print("Provided Binary File: " + self.binaryFile)
        for key, value in self.binaryData.items():
            print(key + ": " + value)
        return ''


def ghidraPull():
    """
    Assuming script will be called for each Binary by ghidra headless as it
    iterates through files. Need to reduce O as much as possible, or maybe rewrite this in
    java
    """
    # Setup Ghidra Interface

    # current program is a predefined global
    program = currentProgram
    programName = str(program).split()[0]
    # Set up decompiler
    decompinterface = DecompInterface()
    # Open program in decompiler
    decompinterface.openProgram(program);  # returns true
    # Get functions, true means forward
    functions = program.getFunctionManager().getFunctions(True)

    # Setup data structure
    binary = Binary(programName)

    # Get PCode and add to Binary.pcode
    PCode = ''

    # Start iterating thru functions
    for function in list(functions):
        # decompile each function
        tokengrp = decompinterface.decompileFunction(function, 0, ConsoleTaskMonitor())
        # c code for function
        c = tokengrp.getDecompiledFunction().getC()
        # Get function name
        funcName = function.getName()

        # add function to Binary func dict.
        binary.functions[funcName] = c

    print("GENERATE OUTPUT REPORT: " + binary.binaryFile + "-GHIDRA.txt")

    writeStrings = []
    writeStrings.append("-----GHIDRA ANALYSIS REPORT-----")
    writeStrings.append("")
    writeStrings.append("")
    writeStrings.append("File Processed: " + binary.binaryFile)
    writeStrings.append("")
    writeStrings.append("")
    for key, value in binary.binaryData.items():
        writeStrings.append("")
        writeStrings.append("--" + key + "--")
        writeStrings.append(value)
    writeStrings.append("----------------------")
    writeStrings.append("Functions Decompiled: ")
    for func, code in binary.functions.items():
        writeStrings.append("-----FUNCTION NAME: " + func + "")
        writeStrings.append(code)
        writeStrings.append("")
        writeStrings.append("")

    with open(binary.binaryFile + "-GHIDRA.txt", "a") as outputFile:
        outputFile.writelines(writeStrings)

    for line in writeStrings:
        print(line)


ghidraPull()
