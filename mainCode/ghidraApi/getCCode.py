
from  ghidra.app.decompiler import DecompInterface
from ghidra.util.task import ConsoleTaskMonitor
from argparse import ArgumentParser

# get the current program
# here currentProgram is predefined

program = currentProgram
decompinterface = DecompInterface()
decompinterface.openProgram(program);
functions = program.getFunctionManager().getFunctions(True)
#with open("outputFunctions.txt", 'w') as file:


# Set up parser for the script arguments
arg_parser = ArgumentParser(description="Opcode statistical analysis", prog='script', prefix_chars='+')
arg_parser.add_argument('+o', '++output', required=True, help='Output file')
args = arg_parser.parse_args(args=getScriptArgs())



functionNames = []
decompiledFunctions = []

for function in list(functions):
    # print(function)
    # decompile each function
    tokengrp = decompinterface.decompileFunction(function, 0, ConsoleTaskMonitor())
    decompiledFunctions.append(tokengrp.getDecompiledFunction().getC())
    functionNames.append(function.getName())


with open(args.output, 'w') as file:
    file.write("// DECOMPILED FROM GHIDRA\n")
    file.write("// Functions: \n")
    for name in functionNames:
        file.write("////" + name + "\n")

    file.write("\n\n// C Code: \n")
    for code in decompiledFunctions:
        file.write(code)



    print("Decompiled C functions saved to " + str(args.output))
