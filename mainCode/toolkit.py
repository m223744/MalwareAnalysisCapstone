# REQUIRED MODULES
from asyncio import subprocess
import sys, argparse, os
import static
import ghidraProc
import machine_learning



# import FlaskWebsite.virtual.app

def website_upload(file):
    # md5hash = static_dict['md5']
    # sha1hash = static_dict['sha1']
    # sha256hash = static_dict['sha256']
    # size_of_file = numerical_list[46]
    # date_created = numerical_list[22]
    # classification = machine_learning.predict_classification(model, numerical_data)
    # text_file = create_text_file(file, outfile, static_dict)
    static_dict = static.static_to_dict(file)
    numerical_list = machine_learning.extract_properties(file)
    size, date = numerical_list[46], numerical_list[22]
    model = machine_learning.create_model('../../storedData/binaryData.csv')
    classification = machine_learning.predict_classification(model, numerical_list)
    outfile = file.split('/')[-1]
    text_file = create_text_file(file, outfile, static_dict)
    db_list = [static_dict['md5'], static_dict['sha1'], static_dict['sha256'], size, date, classification, text_file]
    return db_list


def create_text_file(infile, outfile, static_dict):
    # ghidraAnalysis = ghidraProc.startGhidra(infile)  # Path to file required
    # change path of upload for .txt files
    if sys.argv[0] == 'toolkit.py':
        ROOT_DIR = os.path.abspath('../../MalwareAnalysisCapstone/')
    else:
        ROOT_DIR = os.path.abspath('../../../MalwareAnalysisCapstone/')
    analysis_folder = os.path.join(ROOT_DIR, 'analyzed_files/')
    os.makedirs(analysis_folder, exist_ok=True)
    with open(analysis_folder + outfile + '.txt', 'w') as output_file:
        output_file.write(str(infile) + '\n')
        for key, value in static_dict.items():
            output_file.write('\n' + str(key) + '\n' + str(value) + '\n')
        # output_file.write(ghidraAnalysis)
    file_path = analysis_folder + outfile + '.txt'
    return file_path


def main():
    parser = argparse.ArgumentParser(prog=sys.argv[0])
    parser.add_argument('-i', '--infile', nargs='?', type=str, required=True, help="The file to be analyzed",
                        default=sys.stdin)
    parser.add_argument('-o', '--outfile', nargs='?', type=str, required=True,
                        help="Name of the output file containing the static analysis results in a .txt format")
    args = parser.parse_args()
    infile = args.infile
    outfile = args.outfile
    if not os.path.isfile(infile):
        print("Not a valid file, rerun the program with the correct filename.")
        exit(1)
    static_dict = static.static_to_dict(infile)
    # print(static_dict)
    create_text_file(infile, outfile, static_dict)
    model = machine_learning.create_model('../storedData/binaryData.csv')
    numerical_data = machine_learning.extract_properties(infile)
    classification = machine_learning.predict_classification(model, numerical_data)
    print(classification)


if __name__ == '__main__':
    main()
