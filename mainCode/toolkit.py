# REQUIRED MODULES
from asyncio import subprocess
import sys, argparse, os
import static
import ghidraProc


# # GLOBAL VARIABLES
# ''' We're going to be reading the Binary in 64kb chunks in order to preserve memory allocations.'''
# BUF_SIZE = 65536


# CLASSES

# class Binary:
#     """
#     The Binary class object is a way to create unique objects for each binary that we analyze. This will contain
#     hashes of the binary
#     """
#
#     def __init__(self, binary):
#         self.binaryFile = binary
#         self.fullDict = {}
#         self.md5 = None
#         self.sha1 = None
#         self.sha256 = None
#         self.getHashes()
#
#     def __str__(self):
#         print(f"\nProvided Binary File: {self.binaryFile}\n")
#         for key, value in self.fullDict.items():
#             print(f"{key}: " + ''.join(str(value)) + "\n")
#         return ''
#
#     def getHashes(self):
#         md5 = hashlib.md5()
#         sha1 = hashlib.sha1()
#         sha256 = hashlib.sha256()
#         with open(self.binaryFile, 'rb') as f:
#             while True:
#                 data = f.read(BUF_SIZE)
#                 if not data:
#                     break
#                 md5.update(data)
#                 sha1.update(data)
#                 sha256.update(data)
#             self.md5 = md5
#             self.sha1 = sha1
#             self.sha256 = sha256
#             self.fullDict['md5'] = self.md5.hexdigest()
#             self.fullDict['sha1'] = self.sha1.hexdigest()
#             self.fullDict['sha256'] = self.sha256.hexdigest()


# FUNCTION DEFINITIONS


def main():
    parser = argparse.ArgumentParser(prog=sys.argv[0])
    parser.add_argument('-i', '--infile', nargs='?', type=str, required=True, help="The file to be analyzed",
                        default=sys.stdin)
    parser.add_argument('-o', '--outfile', nargs='?', type=str, required=True,
                        help="Name of the output file containing the static analysis results in a .txt format")
    args = parser.parse_args()
    infile = args.infile
    outfile = args.outfile
    if not os.path.isfile(infile):
        print("Not a valid file, rerun the program with the correct filename.")
        exit(1)
    static_dict = static.static_to_dict(infile)
    # ghidraAnalysis = ghidraProc.startGhidra(infile)  # Path to file required
    with open(outfile + '.txt', 'w') as output_file:
        output_file.write(str(infile) + '\n')
        for key, value in static_dict.items():
            output_file.write('\n' + str(key) + '\n' + str(value) + '\n')
        # output_file.write(ghidraAnalysis)


if __name__ == '__main__':
    main()
