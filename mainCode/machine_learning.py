import scipy
import numpy as np
import pandas as pd
import sklearn as sk
from sklearn import *
import matplotlib.pyplot as plt
import pefile, os, sys, csv
import datetime as dt


def append_to_csv(numerical_list, filename='../storedData/binaryData.csv'):
    with open(filename, 'a+') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(numerical_list)

def extract_properties(file):
    binary = pefile.PE(file, fast_load=True)
    numerical_list = []
    #total = list(binary.print_info())
    dos_header_dict = (binary.DOS_HEADER.dump_dict())
    del dos_header_dict['Structure']
    for key in dos_header_dict.keys():
        numerical_list.append(dos_header_dict[key]['Value'])
    numerical_list.append(binary.NT_HEADERS.Signature)
    file_header_dict = binary.FILE_HEADER.dump_dict()
    del file_header_dict['Structure']
    for key in file_header_dict.keys():
        if key == 'TimeDateStamp':
            value = (file_header_dict[key]['Value'].split(' '))
            test = dt.datetime.utcfromtimestamp(float(int(value[0], 16)))
            year = test.year
            numerical_list.append(year)
        else:
            numerical_list.append(file_header_dict[key]['Value'])
    #print(file_header_dict)
    #print(numerical_list)
    optional_header_dict = binary.OPTIONAL_HEADER.dump_dict()
    del optional_header_dict['Structure']
    #print(optional_header_dict)
    for key in optional_header_dict.keys():
        numerical_list.append(optional_header_dict[key]['Value'])
    #print(numerical_list, len(numerical_list))
    append_to_csv(numerical_list)

    # for keys in test.DOS_HEADER.__keys__:
    #     print(f"{keys}")
    #     for bleh in keys:
    #         print(test.DOS_HEADER.e_magic)



# data = pd.read_csv('./generateImages/MalwareBazaar.csv')
# data = data.drop(data.columns[0], axis = 1)
# print(data.head)
# print(data.dtypes)
# # kmeans_kwargs = {"init": "random","n_init": 10, "max_iter": 300, "random_state": 42,}
# # sse = []
# #
# # for k in range(1, 11):
# #     kmeans = sk.cluster.KMeans(n_clusters=k)
# #     kmeans.fit(data)
# #     sse.append(kmeans.inertia_)
# # plt.style.use("fivethirtyeight")
# # plt.plot(range(1,11), sse)
# # plt.xticks(range(1,11))
# # plt.xlabel("Number of Clusters")
# # plt.ylabel("SSE")
# # plt.show()


if __name__ == '__main__':
    extract_properties(sys.argv[1])
